const { join } = require('path');
const { createImage, formatImageContent } = require('../src/service/text-image.service');
const Warrior = require('../src/model/warrior');

// eslint-disable-next-line import/no-dynamic-require
const jsonData = require(join(__dirname, '..', 'players.example.json'));
const warriors = jsonData.map((row, index) => {
  const [name, twitter] = row;
  const warrior = new Warrior({ name, twitter });
  if (index > 4) {
    warrior.alive = false;
  }
  return warrior;
});

describe('Text image service', () => {
  const content = 'warrior 1    \u0336w\u0336a\u0336r\u0336r\u0336i\u0336o\u0336r \u03364    warrior 7\nwarrior 2    warrior 5    warrior 8\nwarrior 3    warrior 6    warrior 9';

  test('createImage is a function', () => {
    expect(createImage).toBeDefined();
    expect(typeof createImage).toBe('function');
  });

  test('createImage returns a base64 image string', () => {
    const data = createImage(content);
    expect(data).toBeDefined();
    expect(typeof data).toBe('string');
    expect(data.indexOf('data:image/png;base64,')).toBe(0);
  });

  test('formatImageContent is a function', () => {
    expect(formatImageContent).toBeDefined();
    expect(typeof formatImageContent).toBe('function');
  });

  const empty = formatImageContent();
  const formatted = formatImageContent(warriors);

  test('formatImageContent returns a string', () => {
    expect(empty).toBeDefined();
    expect(typeof empty).toBe('string');
    expect(empty.length).toBe(0);

    expect(formatted).toBeDefined();
    expect(typeof formatted).toBe('string');
    expect(formatted.length).toBeGreaterThan(0);
  });

  test('createImage works with content generated by formatImageContent', () => {
    const data = createImage(formatted);
    expect(data).toBeDefined();
    expect(typeof data).toBe('string');
    expect(data.indexOf('data:image/png;base64,')).toBe(0);
  });
});
